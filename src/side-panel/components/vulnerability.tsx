/*
 * Copyright (c) 2019-present Sonatype, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { faChevronLeft, faExternalLink } from '@fortawesome/free-solid-svg-icons'
import { formatVulnerabilityScore, NxAccordion, NxButton, NxDescriptionList, NxFontAwesomeIcon, NxLoadingSpinner, NxSmallTag, NxStatefulAccordion, NxTag, NxTextLink, NxTooltip, NxVulnerabilityIndicator } from '@sonatype/react-shared-components'
import React, { useContext, useEffect, useState } from 'react'
import Markdown from 'react-markdown'
import { ExtensionVulnerabilityDataContext } from '../../common/context/extension-vulnerability-data'
import { ExtensionVulnerabilityData } from '../../common/data/types'
import { logger, LogLevel } from '../../common/logger'
import { MessageRequestType } from '../../common/message/constants'
import { sendRuntimeMessage } from '../../common/message/helpers'

export default function VulnerabilityPanel(props: Readonly<{vulnerabilityReference?: string}>) {
    const extensionVulnerabilityDataContext = useContext(ExtensionVulnerabilityDataContext)
    
    const [loading, setLoading] = useState<boolean>(false)
    const [vulnerabilityReference, setVulnerabilityReference] = useState<string>('')
    const [vulnerability, setVulnerability] = useState<ExtensionVulnerabilityData | undefined>(undefined)

    useEffect(() => {
        if (!loading) {
            logger.logReact("Requesting Vulnerability information", LogLevel.DEBUG, props.vulnerabilityReference)
            setLoading(true)
            setVulnerabilityReference(props.vulnerabilityReference as string)
            sendRuntimeMessage({
                messageType: MessageRequestType.LOAD_VULNERABILITY,
                vulnerabilityReference: props.vulnerabilityReference as string
            }).then((msgResponse) => {
                logger.logReact("Response", LogLevel.DEBUG, msgResponse, extensionVulnerabilityDataContext.vulnerabilities)
            })
        }
    }, [props.vulnerabilityReference])

    useEffect(() => {
        logger.logReact("Vulnerability Data updated", LogLevel.DEBUG, extensionVulnerabilityDataContext.vulnerabilities)
        if (Object.keys(extensionVulnerabilityDataContext.vulnerabilities).includes(vulnerabilityReference)) {
            setVulnerability(extensionVulnerabilityDataContext.vulnerabilities[vulnerabilityReference])
            setLoading(false)
        }
    }, [extensionVulnerabilityDataContext.vulnerabilities, vulnerabilityReference])

    if (vulnerability === undefined) {
        return (
            <>
                <header className="nx-global-header">
                    <div className="nx-back-button tm-back-button">
                        <a className="nx-text-link" onClick={() => window.history.back()}>
                            <NxFontAwesomeIcon icon={faChevronLeft} />
                            <span>Back to Component</span>
                        </a>
                    </div>
                </header>
                <section className="nx-tile">
                    <header className="nx-tile-header">
                        <div className="nx-tile-header__title">
                            <h2 className="nx-h2">
                                {vulnerabilityReference}
                            </h2>
                        </div>
                    </header>
                    <div className="nx-tile-content">
                        <NxLoadingSpinner />
                    </div>
                </section>
            </>
        )
    }

    return (
        <>
            <header className="nx-global-header">
                <div className="nx-back-button tm-back-button">
                    <a className="nx-text-link" onClick={() => window.history.back()}>
                        <NxFontAwesomeIcon icon={faChevronLeft} />
                        <span>Back to Component</span>
                    </a>
                </div>
            </header>
            <section className="nx-tile">
                <header className="nx-tile-header">
                    <div className="nx-tile-header__title">
                        <h2 className="nx-h2">
                            {vulnerabilityReference}
                        </h2>
                    </div>
                    <div className="nx-tile__tags">
                        <NxTooltip title="Wrapped inside NxTooltip!">
                            <NxSmallTag color={'teal'}>{vulnerability.data.researchType}</NxSmallTag>
                        </NxTooltip>
                    </div>
                    <div className="nx-tile__actions">
                        <NxButton title="View on NVD"><NxFontAwesomeIcon icon={faExternalLink} /></NxButton>
                    </div>
                </header>
                <div className="nx-tile-content">
                    {loading || vulnerability === undefined && (
                        <NxLoadingSpinner />
                    ) || (
                        <div className="nx-tile-content nx-tile-content--accordion-container">
                            <NxDescriptionList>
                                <NxDescriptionList.Item>
                                    <NxDescriptionList.Term>{vulnerability.data.mainSeverity?.sourceLabel}</NxDescriptionList.Term>
                                    <NxDescriptionList.Description>
                                        <NxVulnerabilityIndicator score={vulnerability.data.mainSeverity?.score as number} />
                                        <span className="nx-vulnerability-score">{formatVulnerabilityScore(vulnerability.data.mainSeverity?.score as number)}</span>
                                    </NxDescriptionList.Description>
                                </NxDescriptionList.Item>
                                {vulnerability.data.severityScores?.map((score, i) => {
                                    return (
                                        <NxDescriptionList.Item key={`severity-score-${i}`}>
                                            <NxDescriptionList.Term>{score.sourceLabel}</NxDescriptionList.Term>
                                            <NxDescriptionList.Description>
                                                <NxVulnerabilityIndicator score={score.score as number} />
                                                <span className="nx-vulnerability-score">{formatVulnerabilityScore(score.score as number)}</span>
                                            </NxDescriptionList.Description>
                                        </NxDescriptionList.Item>
                                    )
                                })}
                                <NxDescriptionList.Item>
                                    <NxDescriptionList.Term>KEV Status</NxDescriptionList.Term>
                                    <NxDescriptionList.Description>
                                        {vulnerability.data.kevData?.isKev === true && (
                                            <NxTag color="red">Known to be exploited</NxTag>
                                        ) || (
                                            <NxTag>Not known to be exploited</NxTag>
                                        )}
                                    </NxDescriptionList.Description>
                                </NxDescriptionList.Item>
                            </NxDescriptionList>
                            <NxStatefulAccordion>
                                <NxAccordion.Header>
                                    <NxAccordion.Title>
                                        <NxTooltip title={'Description from CVE'}>
                                            <span>Description from CVE</span>
                                        </NxTooltip>
                                    </NxAccordion.Title>
                                </NxAccordion.Header>
                                <p className="nx-p">{vulnerability.data.description}</p>
                            </NxStatefulAccordion>

                            <NxStatefulAccordion>
                                <NxAccordion.Header>
                                    <NxAccordion.Title>
                                        <NxTooltip title={'Explanation'}>
                                            <span>Sonatype Explanation</span>
                                        </NxTooltip>
                                    </NxAccordion.Title>
                                </NxAccordion.Header>
                                <Markdown>{vulnerability.data.explanationMarkdown}</Markdown>
                            </NxStatefulAccordion>

                            <NxStatefulAccordion>
                                <NxAccordion.Header>
                                    <NxAccordion.Title>
                                        <NxTooltip title={'Detection'}>
                                            <span>Detection</span>
                                        </NxTooltip>
                                    </NxAccordion.Title>
                                </NxAccordion.Header>
                                <Markdown>{vulnerability.data.detectionMarkdown}</Markdown>
                            </NxStatefulAccordion>

                            <NxStatefulAccordion>
                                <NxAccordion.Header>
                                    <NxAccordion.Title>
                                        <NxTooltip title={'Sonatype Recommendation'}>
                                            <span>Sonatype Recommendation</span>
                                        </NxTooltip>
                                    </NxAccordion.Title>
                                </NxAccordion.Header>
                                <Markdown>{vulnerability.data.recommendationMarkdown}</Markdown>
                            </NxStatefulAccordion>

                            <NxStatefulAccordion>
                                <NxAccordion.Header>
                                    <NxAccordion.Title>
                                        <NxTooltip title={'Advisories'}>
                                            <span>Advisories</span>
                                        </NxTooltip>
                                    </NxAccordion.Title>
                                </NxAccordion.Header>
                                <ul className="nx-lis nx-list--bulleted">
                                    {vulnerability.data.advisories?.map((advisory, i) => {
                                        return (
                                            <li className='nx-list__item' key={`advisory-${i}`}>
                                                <span className='nx-list__text'>
                                                    {advisory.referenceType}: <NxTextLink external href="{advisory.url}">{advisory.url}</NxTextLink>
                                                </span>
                                            </li>
                                        )
                                    })}
                                </ul>
                            </NxStatefulAccordion>
                        </div>
                    )}
                </div>
            </section>
        </>
    )
}