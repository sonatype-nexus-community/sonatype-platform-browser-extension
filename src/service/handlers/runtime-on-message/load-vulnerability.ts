/*
 * Copyright (c) 2019-present Sonatype, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SecurityVulnerabilityDataDTO } from '@sonatype/nexus-iq-api-client'
import { ExtensionConfigurationState } from '../../../common/configuration/extension-configuration'
import { ExtensionVulnerabilitiesData } from '../../../common/data/types'
import { logger, LogLevel } from '../../../common/logger'
import { MessageResponseStatus } from '../../../common/message/constants'
import { MessageRequestLoadVulnerability, MessageResponseFunction } from '../../../common/message/types'
import { MessageSender } from '../../../common/types'
import { IqMessageHelper } from '../helpers/iq'
import { BaseRuntimeOnMessageHandler } from './base'

export class LoadVulnerabilityMessageHandler extends BaseRuntimeOnMessageHandler {
    constructor(
        protected readonly extensionConfigurationState: ExtensionConfigurationState,
        protected readonly iqMessageHelper: IqMessageHelper,
        protected readonly extensionVulnerabilityData: ExtensionVulnerabilitiesData
    ) {
        super(extensionConfigurationState, iqMessageHelper)
    }

    handleMessage(
        message: MessageRequestLoadVulnerability,
        sender: MessageSender,
        sendResponse: MessageResponseFunction
    ): Promise<void> {
        logger.logServiceWorker('Request to load Vulnerability', LogLevel.DEBUG, message.vulnerabilityReference)
        return this.iqMessageHelper
            .getVulnerability(message.vulnerabilityReference)
            .then((msgResp) => {
                if (msgResp.status === MessageResponseStatus.SUCCESS) {
                    const newVulnerabilityData = this.extensionVulnerabilityData
                    newVulnerabilityData.vulnerabilities[message.vulnerabilityReference] = {
                        data: msgResp.vulnerability as SecurityVulnerabilityDataDTO,
                        lastUpdated: Date.now(),
                    }
                    this.updateExtensionVulnerabilityData(newVulnerabilityData).then((msgResponse) => {
                        logger.logServiceWorker(
                            'Updated Extension Vulnerability Data in storage',
                            LogLevel.DEBUG,
                            msgResponse
                        )
                        sendResponse(msgResponse)
                    })
                }
            })
    }
}
